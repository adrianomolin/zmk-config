/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        lm_one_hyper: lm_one_hyper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 1>,
                <&macro_press>,
                <&kp>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp>,
                <&macro_release>,
                <&mo 1>;

            label = "LM_ONE_HYPER";
        };
    };

    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        lht: leftshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&skq>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E         &kp R  &kp T        &kp Y      &kp U         &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL         &kp A  &kp S  &kp D         &kp F  &kp G        &kp H      &kp J         &kp K      &kp L    &kp SEMI  &kp SQT
&lht LSHFT LSHFT  &kp Z  &kp X  &kp C         &kp V  &kp B        &kp N      &kp M         &kp COMMA  &kp DOT  &kp FSLH  &lm_one_hyper
                                &kp LEFT_ALT  &mo 2  &kp ENTER    &kp SPACE  &lt 1 ESCAPE  &kp LCMD
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp N1          &kp N2            &kp N3        &kp N4  &kp N5       &kp N6     &kp N7    &kp N8        &kp N9     &kp N0  &kp BSPC
&kp LCTRL  &trans          &trans            &trans        &trans  &trans       &kp LEFT   &kp DOWN  &kp UP        &kp RIGHT  &trans  &trans
&kp LSHFT  &kp LEFT_SHIFT  &sk LS(LEFT_ALT)  &trans        &trans  &trans       &trans     &trans    &trans        &trans     &trans  &trans
                                             &kp LEFT_ALT  &mo 2   &kp ENTER    &kp SPACE  &trans    &kp LEFT_GUI
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LC(GRAVE)  &kp EXCL   &kp AT     &kp HASH      &kp DLLR       &kp PRCNT    &kp CARET  &kp AMPS           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE  &kp BSPC
&kp LG(V)      &trans     &kp MINUS  &kp PLUS      &kp EQUAL      &kp HASH     &kp UNDER  &kp COLON          &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SLASH  &kp DOT
&kp LG(C)      &kp LG(X)  &trans     &kp ASTERISK  &kp BACKSLASH  &kp PIPE     &kp TILDE  &kp DOUBLE_QUOTES  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp AT     &trans
                                     &kp LEFT_ALT  &kp ESCAPE     &kp ENTER    &kp SPACE  &mo 1              &kp LEFT_GUI
            >;
        };

        adjust_layer {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans        &trans      &trans        &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &kp C_PREV    &kp C_PP    &kp C_NEXT    &trans  &trans
                                        &trans        &trans        &trans          &trans  &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
